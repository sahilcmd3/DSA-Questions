###Hash Functions

A hash function is a function that converts input data of any size into a fixed-size value,
typically represented as a sequence of numbers and letters. The output, known as the **hash value** or **hash code**,
is unique to each unique input.

### Properties of a Good Hash Function:
1. Deterministic: The same input will always produce the same output.
2. Fast Computation: It should be quick to compute the hash value.
3. Uniform Distribution: It should distribute hash values uniformly across the output range, minimizing collisions.
4. Minimize Collisions: Different inputs should produce different hash values as much as possible.

### Uses of Hash Functions:
1. Data Integrity: Hash functions are used in checksums to verify data integrity.
2. Cryptography: In secure password storage, digital signatures, and blockchain.
3. Hash Tables: For efficient data retrieval.

## Hashmaps
A hashmap (or hash table) is a data structure that implements an associative array abstract data type,
a structure that can map keys to values. It uses a hash function to compute an index into an array of buckets or slots,
from which the desired value can be found.

### Components of a Hashmap:
1. Keys and Values: The data to be stored.
2. Buckets: The array that holds the hash table entries.
3. Hash Function: Computes the index of the array for a given key.

### How Hashmaps Work:
1. Hashing: The key is passed through a hash function to get the hash code.
2. Indexing: The hash code is then used to determine the index in the array (bucket).
3. Collision Handling: If two keys hash to the same index (a collision), a collision resolution strategy is used.

### Collision Resolution Techniques:
1. Chaining: Each bucket contains a list of entries that hash to the same index.
2. Open Addressing: All elements are stored in the array itself, and when a collision occurs, the algorithm
searches for the next empty slot.

### Common Operations:
1. Insert: Compute the hash, find the bucket, and add the key-value pair.
2. Delete: Compute the hash, find the bucket, and remove the key-value pair.
3. Search: Compute the hash, find the bucket, and retrieve the value.

### Use Cases of Hashmaps:
1. Databases: Indexing for quick data retrieval.
2. Caches: Storing frequently accessed data for quick access.
3. Dictionaries: Implementing associative arrays in programming languages (e.g., Python's `dict`).
4. Counting Frequencies: Counting occurrences of elements in a collection.
5. Sets: Implementing sets for quick membership testing (e.g., Python's `set`).

### Example in Python:
Here’s a simple example of a hashmap implementation using Python’s built-in `dict`:

```python
# Creating a hashmap
hashmap = {}

# Inserting key-value pairs
hashmap['apple'] = 1
hashmap['banana'] = 2
hashmap['orange'] = 3

# Accessing values
print(hashmap['apple'])  # Output: 1

# Deleting key-value pairs
del hashmap['banana']

# Checking if a key exists
print('banana' in hashmap)  # Output: False

# Iterating through keys and values
for key, value in hashmap.items():
    print(key, value)
# Output:
# apple 1
# orange 3
```

## Conclusion
Hashes and hashmaps are fundamental concepts in computer science that provide efficient methods for storing and
retrieving data. Understanding these concepts can significantly improve your problem-solving skills and efficiency
in various applications, from databases to algorithms.


### When to Use Hashes and Hashmaps

1. Constant Time Lookups:
   - Problem Type: When you need to check membership quickly, such as finding if an element exists in a collection.
   - Examples: Problems like "Two Sum," "Contains Duplicate," or "Intersection of Two Arrays."

2. Counting Frequencies:
   - Problem Type: When you need to count occurrences of elements.
   - Examples: Problems like "Top K Frequent Elements," "Group Anagrams," or "Valid Anagram."

3. Index Mapping:
   - Problem Type: When you need to map elements to their indices for quick access.
   - Examples: Problems like "Two Sum," where you need to find the indices of two numbers that add up to a target value.

4. Handling Duplicates:
   - Problem Type: When you need to manage and check for duplicates efficiently.
   - Examples: Problems like "Contains Duplicate II," where you need to check if any value appears at least
       twice within a certain range.

5. Key-Value Associations:
   - Problem Type: When you need to store and retrieve data based on keys efficiently.
   - Examples: Problems like "Design HashMap" or "LRU Cache."

6. Union-Find Problems:
   - Problem Type: When you need to solve disjoint-set problems.
   - Examples: Problems like "Number of Connected Components in an Undirected Graph."

### Examples of LeetCode Problems Utilizing Hashmaps

1. Two Sum:
   - Problem: Given an array of integers, return indices of the two numbers such that they add up to a specific target.
   - Approach: Use a hashmap to store the complement of each number and check if the complement exists in the hashmap.

   ```python
   def twoSum(nums, target):
       hashmap = {}
       for i, num in enumerate(nums):
           complement = target - num
           if complement in hashmap:
               return [hashmap[complement], i]
           hashmap[num] = i
   ```

2. Valid Anagram:
   -Problem: Given two strings, determine if they are anagrams of each other.
   -Approach: Use a hashmap to count the frequency of each character in the first string and then decrement
                   the count for each character in the second string.

   ```python
   def isAnagram(s, t):
       if len(s) != len(t):
           return False
       count = {}
       for char in s:
           count[char] = count.get(char, 0) + 1
       for char in t:
           if char not in count or count[char] == 0:
               return False
           count[char] -= 1
       return True
   ```

3. Group Anagrams:
   -Problem: Given an array of strings, group the anagrams together.
   -Approach: Use a hashmap where the key is a sorted version of the string, and the value is a list of anagrams.

   ```python
   def groupAnagrams(strs):
       hashmap = {}
       for s in strs:
           key = ''.join(sorted(s))
           if key not in hashmap:
               hashmap[key] = []
           hashmap[key].append(s)
       return list(hashmap.values())
   ```

4. Longest Consecutive Sequence:
   -Problem: Given an unsorted array of integers, find the length of the longest consecutive elements sequence.
   -Approach: Use a hashmap to mark the presence of each number and then iterate through each
                   number to find the longest sequence.

   ```python
   def longestConsecutive(nums):
       num_set = set(nums)
       longest_streak = 0
       for num in num_set:
           if num - 1 not in num_set:
               current_num = num
               current_streak = 1
               while current_num + 1 in num_set:
                   current_num += 1
                   current_streak += 1
               longest_streak = max(longest_streak, current_streak)
       return longest_streak
   ```

### Tips for Identifying Use Cases
-Keywords: Look for keywords in problem descriptions like "unique," "count," "frequency," "index," "anagram,"
                or "mapping."
-Constraints: Consider the constraints of the problem; hashmaps are particularly useful for handling large
                datasets with efficient time complexity.

### Conclusion
Hashmaps are powerful tools for a wide range of problems due to their efficient constant time complexity
for insertion, deletion, and lookups. By practicing and solving more problems, you'll get better at
recognizing patterns and knowing when to leverage hashmaps effectively.